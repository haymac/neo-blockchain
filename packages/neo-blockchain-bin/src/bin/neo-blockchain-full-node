#! /usr/bin/env node
/* @flow */
import 'babel-polyfill';

import program from 'commander';
import { take } from 'rxjs/operators';

import {
  createFullNode,
  log,
  resolveHome,
  setupCLI,
} from '../';
import pkg from '../../package.json';

const { shutdownFuncs, shutdown } = setupCLI();

type Options = {|
  data: string,
  test: boolean,
|};

const getOptions = (options: Object): Options => ({
  data: options.data == null ? '~/data' : options.data,
  test: options.test == null ? false : !!options.test,
  chain: options.chain == null ? undefined : {
    format: 'raw',
    path: options.chain,
  },
});

const createFullNodeFromCLI = (
  optionsIn: Object,
  dumpPath?: string,
): Observable<any> => {
  const options = getOptions(optionsIn);
  const node = createFullNode({
    testNet: options.test,
    dataPath: options.data,
    chain: options.chain,
    dumpPath,
  });
  return node;
};

program
  .version(pkg.version)
  .option('-d, --data <path>', 'Data directory for the full node. Defaults to ~/data.')
  .option('-c, --chain <path>', 'Path to chain.acc file.')
  .option('-t, --test', 'Run full node for TestNet. Default false.');

program
  .command('dump <outpath>')
  .description(
    'Dump a chain.acc file that can be used to quickly reload a node.'
  )
  .action(async (outpath, options) => {
    const node$ = await createFullNodeFromCLI(
      options.parent,
      resolveHome(outpath),
    );
    log({ event: 'DUMP_CHAIN' });
    await node$.pipe(take(1)).toPromise();
    log({ event: 'DUMP_CHAIN_SUCCESS' })
    shutdown({ exitCode: 0 });
  });

program
  .command('start')
  .description('Start the full node')
  .action(async (options) => {
    const node$ = createFullNodeFromCLI(options.parent);
    const subscription = node$.subscribe();
    shutdownFuncs.push(() => subscription.unsubscribe());
  })

program.parse(process.argv);
